﻿@{
	ViewData["Title"] = "Dashboard";
}

<div class="row">
	<div class="col-6">
		<div class="card">
			<div id="graficoPromedioDesemepenoSatisfaccion"></div>
		</div>
	</div>
	<div class="col-6">
		<div class="card">
			<div id="graficoPuntajeDesemepenoSatisfaccion"></div>
		</div>
	</div>
	<div class="col-6">
		<div class="card">
			<div id="graficoTreemap"></div>
		</div>
	</div>
	<div class="col-6">
		<div class="card">
			<div id="graficoSalarioPromedioPorDepartamento"></div>
		</div>
	</div>
	<div class="col-6">
		<div class="card">
			<div id="graficoPromedioYears"></div>
		</div>
	</div>
	<div class="col-6">
		<div class="card">
			<div id="graficoEmpleados"></div>
		</div>
	</div>
</div>

<style>
	.card {
		padding: 10px;
		margin: 20px;
	}
</style>


<script>
	document.addEventListener("DOMContentLoaded", function () {
		const departamentos = @Html.Raw(ViewBag.Departamentos);
		const promedioDesempeno = @Html.Raw(ViewBag.PromedioDesempeno);
		const promedioSatisfaccion = @Html.Raw(ViewBag.PromedioSatisfaccion);
		const puntajeDesempeno = @Html.Raw(ViewBag.PuntajeDesempeno);
		const puntajeSatisfaccion = @Html.Raw(ViewBag.PuntajeSatisfaccion);

		const configuracionGraficoPromedioDesemepenoSatisfaccion = {
			chart: {
				type: 'radar'
			},
			series: [
				{
					name: 'Desempeño Promedio',
					data: promedioDesempeno
				},
				{
					name:'Satisfacción Promedio',
					data: promedioSatisfaccion
				}
			],
			labels: departamentos,
			title: {
				text: 'Comparación de Desempeño y Satisfacción Promedio por Departamento'
			}
		}

		const graficoPromedioDesemepenoSatisfaccion = new ApexCharts(document.getElementById("graficoPromedioDesemepenoSatisfaccion"), configuracionGraficoPromedioDesemepenoSatisfaccion);
		graficoPromedioDesemepenoSatisfaccion.render();


		const configuracionGraficoPuntajeDesemepenoSatisfaccion = {
			chart: {
				type: 'bar'
			},
			series: [
				{
					name: 'Desempeño',
					data: puntajeDesempeno.map(e => e.toFixed(2))
				},
				{
					name: 'Satisfacción',
					data: puntajeSatisfaccion.map(e => e.toFixed(2))
				}
			],
			xaxis: {
				categories: departamentos
			},
			title: {
				text: 'Comparación puntaje de Desempeño y Satisfacción por Departamento'
			}
		}

		const graficoPuntajeDesemepenoSatisfaccion = new ApexCharts(
			document.getElementById('graficoPuntajeDesemepenoSatisfaccion'),
			configuracionGraficoPuntajeDesemepenoSatisfaccion
		);

		graficoPuntajeDesemepenoSatisfaccion.render();
	})

	document.addEventListener("DOMContentLoaded", function () {
		//  gráfico Treemap
		const cantidadEmpleados = @Html.Raw(Json.Serialize(ViewBag.CantidadEmpleados));

		const configuracionGraficoTreemap = {
			chart: {
				height: 350,
				type: 'treemap'
			},
			series: [{
				data: cantidadEmpleados.map(e => ({
					x: e.name,
					y: e.value
				}))
			}],
			title: {
				text: 'Cantidad de Empleados por Departamento'
			}
		};

		const graficoTreemap = new ApexCharts(document.getElementById('graficoTreemap'), configuracionGraficoTreemap);
		graficoTreemap.render();
	});

	document.addEventListener("DOMContentLoaded", function () {

		var salarioPromedioPorDepartamento = @Html.Raw(ViewBag.SalarioPromedioPorDepartamentoJson);

		var departamentos = salarioPromedioPorDepartamento.map(item => item.Departamento);
		var salariosPromedio = salarioPromedioPorDepartamento.map(item => item.SalarioPromedio);

		//  gráfico de pastel
		const configuracionGraficoSalarioPromedioPorDepartamento = {
			chart: {
				type: 'pie'
			},
			series: salariosPromedio,
			labels: departamentos,
			title: {
				text: 'Salario Promedio por Departamento'
			},
			colors: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
		};

		const graficoSalarioPromedioPorDepartamento = new ApexCharts(
			document.getElementById("graficoSalarioPromedioPorDepartamento"),
			configuracionGraficoSalarioPromedioPorDepartamento
		);

		graficoSalarioPromedioPorDepartamento.render();
	});

	document.addEventListener("DOMContentLoaded", function () {

		var promedioYears = @Html.Raw(ViewBag.PromedioYearsJson);


		var posiciones = promedioYears.map(item => item.Posicion);  
		var añosExperienciaPromedio = promedioYears.map(item => item.ExperienciaPromedio);  

		// Configuración del gráfico de barras
		const configuracionGraficoPromedioAños = {
			chart: {
				type: 'bar'
			},
			series: [{
				name: 'Promedio de Años de Experiencia',
				data: añosExperienciaPromedio
			}],
			xaxis: {
				categories: posiciones
			},
			title: {
				text: 'Promedio de Años de Experiencia por Posición'
			}
		};

		
		const graficoPromedioAños = new ApexCharts(
			document.getElementById('graficoPromedioYears'),
			configuracionGraficoPromedioAños
		);

		graficoPromedioAños.render();
	});

	document.addEventListener("DOMContentLoaded", function () {
		
		var cantidadEmpleadosContratados = @Html.Raw(ViewBag.cantidadEmpleadosContratadosJson);

		
		var anosContratacion = cantidadEmpleadosContratados.map(item => item.AñoContratacion);  
		var cantidadEmpleados = cantidadEmpleadosContratados.map(item => item.CantidadEmpleados);

		
		const configuracionGraficoEmpleadosPorAno = {
			chart: {
				type: 'bar'
			},
			series: [{
				name: 'Cantidad de Empleados Contratados',
				data: cantidadEmpleados  
			}],
			xaxis: {
				categories: anosContratacion  
			},
			title: {
				text: 'Cantidad de Empleados Contratados por Año'
			}
		};

		
		const graficoEmpleadosPorAno = new ApexCharts(
			document.getElementById('graficoEmpleados'),  
			configuracionGraficoEmpleadosPorAno  
		);

		graficoEmpleadosPorAno.render(); 
	});
	
</script>